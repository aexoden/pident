#!/usr/bin/env php
<?php
//------------------------------------------------------------------------------
// Copyright (c) 2010 Jason Lynch <jason@calindora.com>
//
// This program is free software. It comes without any warranty, to
// the extent permitted by applicable law. You can redistribute it
// and/or modify it under the terms of the Do What The Fuck You Want
// To Public License, Version 2, as published by Sam Hocevar. See
// http://sam.zoy.org/wtfpl/COPYING for more detail
//------------------------------------------------------------------------------

error_reporting(E_ALL | E_STRICT);

require(__DIR__ . '/lib/inc.main.php');

//------------------------------------------------------------------------------
// Globals
//------------------------------------------------------------------------------

$POOL_PROBABILITIES = get_pool_probabilities();

//------------------------------------------------------------------------------
// Functions
//------------------------------------------------------------------------------

function get_latest_block_number()
{
	$sql = "SELECT MAX(number)
		FROM blocks;";
	$row = pg_fetch_row(pg_query($sql));

	return $row[0];
}

function get_difficulty($block = null)
{
	if ($block === null)
		return (float)(shell_exec('bitcoind getdifficulty'));

	$data = json_decode(shell_exec("bitcoind getblockbycount $block"), true);

	$shift = ($data['bits'] >> 24) & 0xFF;
	$difficulty = 0x0000FFFF / ($data['bits'] & 0x00FFFFFF);

	while ($shift < 29)
	{
		$difficulty *= 256;
		$shift++;
	}

	while ($shift > 29)
	{
		$difficulty /= 256.0;
		$shift--;
	}

	return $difficulty;
}

function get_pool_probabilities()
{
	$latest_block_number = get_latest_block_number();

	$sql = "SELECT found_by AS pool, COUNT(*) AS block_count
		FROM blocks
		WHERE number > $latest_block_number - {$GLOBALS['conf']['maximum_backlog']}
		GROUP BY found_by;";

	$result = pg_query($sql);

	$total = 0;
	$counts = array();

	while ($row = pg_fetch_assoc($result))
	{
		$total += $row['block_count'];

		if ($row['pool'] != '')
			$counts[$row['pool']] = $row['block_count'];
	}

	$probabilities = array();

	foreach ($counts as $pool => $block_count)
	{
		$probabilities[$pool] = $block_count / $total;
	}

	return $probabilities;
}

function get_hash_rates()
{
	global $POOL_PROBABILITIES;

	$now = time();

	$sql = "SELECT COUNT(*) AS blocks, MIN(time) AS start, MAX(time) AS end
		FROM blocks
		WHERE time > $now - 86400";

	$result = pg_query($sql);
	$data = pg_fetch_assoc($result);

	$rate = ($data['blocks'] / 86400) * get_difficulty() * pow(2, 32);
	$rates = array();

	foreach ($POOL_PROBABILITIES as $pool => $probability)
	{
		$rates[$pool] = $rate * $probability;
	}

	return $rates;
}

function convert_score($score)
{
	return (atan(200 * ($score - 0.08198)) + M_PI_2) / M_PI;
}

function normalize_scores($scores, $convert=true)
{
	$normalized_scores = array();

	$total_score = 0.0;

	foreach ($scores as $pool => $score)
		$total_score += $score;

	foreach ($scores as $pool => $score)
		$normalized_scores[$pool] = $convert ? convert_score($score / $total_score) : ($score / $total_score);

	return $normalized_scores;
}

function get_block_probabilities($block)
{
	global $POOL_PROBABILITIES;

	$scores = normalize_scores(fetchScores(bits2hex($block['hash'])));

	$probabilities = array();

	foreach ($scores as $pool => $score)
		$probabilities[$pool] = $score * $POOL_PROBABILITIES[$pool];

	return normalize_scores($probabilities, false);
}

function get_all_block_probabilities()
{
	$pools = get_pools();

	$prob = array();
	$base_prob = array();

	foreach ($pools as $pool)
	{
		$prob[$pool] = array();
		$base_prob[$pool] = 1.0;
	}

	$sql = "SELECT *
		FROM blocks
		ORDER BY number DESC;";

	$result = pg_query($sql);

	while ($block = pg_fetch_assoc($result))
	{
		$block_pool = $block['found_by'];

		$block_pool_index = array_search($block_pool, $pools);

		if ($block_pool != '' && $block_pool_index === false)
			continue;

		$block_probabilities = get_block_probabilities($block);

		if ($block_pool != '')
		{
			$prob[$block_pool][$block['time']] = $base_prob[$block_pool];
			unset($pools[$block_pool_index]);
		}
		else if (time() - $block['time'] < 3600.0 * 3.0)
		{
			foreach ($pools as $pool)
			{
				$prob[$pool][$block['time']] = $base_prob[$pool] * $block_probabilities[$pool];

				$base_prob[$pool] *= 1 - $block_probabilities[$pool];
			}
		}

		if (count($pools) == 0)
			break;
	}

	return $prob;
}

function get_pools()
{
	$sql = "SELECT found_by
		FROM blocks
		WHERE found_by IS NOT NULL
		GROUP BY found_by
		ORDER BY found_by ASC;";

	$result = pg_query($sql);

	$pools = array();

	while ($row = pg_fetch_assoc($result))
	{
		$pools[] = $row['found_by'];
	}

	return $pools;
}

//------------------------------------------------------------------------------
// Main Execution
//------------------------------------------------------------------------------

$data = array(
	'rates' => get_hash_rates(),
	'most_recent_block' => get_all_block_probabilities(),
);

echo json_encode($data);

?>
